/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { ChallengeResponse } from '../models/challenge-response';
import { ChallengeVerifyDto } from '../models/challenge-verify-dto';
import { getChallenge } from '../fn/authentication/get-challenge';
import { GetChallenge$Params } from '../fn/authentication/get-challenge';
import { register } from '../fn/authentication/register';
import { Register$Params } from '../fn/authentication/register';
import { verifyChallenge } from '../fn/authentication/verify-challenge';
import { VerifyChallenge$Params } from '../fn/authentication/verify-challenge';

@Injectable({ providedIn: 'root' })
export class ApiAuthenticationService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `register()` */
  static readonly RegisterPath = '/api/auth/register';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `register()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  register$Response(params: Register$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return register(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `register$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  register(params: Register$Params, context?: HttpContext): Observable<void> {
    return this.register$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getChallenge()` */
  static readonly GetChallengePath = '/api/auth/challenge';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getChallenge()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  getChallenge$Response(params: GetChallenge$Params, context?: HttpContext): Observable<StrictHttpResponse<ChallengeResponse>> {
    return getChallenge(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getChallenge$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  getChallenge(params: GetChallenge$Params, context?: HttpContext): Observable<ChallengeResponse> {
    return this.getChallenge$Response(params, context).pipe(
      map((r: StrictHttpResponse<ChallengeResponse>): ChallengeResponse => r.body)
    );
  }

  /** Path part for operation `verifyChallenge()` */
  static readonly VerifyChallengePath = '/api/auth/verify-challenge';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `verifyChallenge()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  verifyChallenge$Response(params: VerifyChallenge$Params, context?: HttpContext): Observable<StrictHttpResponse<ChallengeVerifyDto>> {
    return verifyChallenge(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `verifyChallenge$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  verifyChallenge(params: VerifyChallenge$Params, context?: HttpContext): Observable<ChallengeVerifyDto> {
    return this.verifyChallenge$Response(params, context).pipe(
      map((r: StrictHttpResponse<ChallengeVerifyDto>): ChallengeVerifyDto => r.body)
    );
  }

}
