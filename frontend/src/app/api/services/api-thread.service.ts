/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { getThread } from '../fn/thread/get-thread';
import { GetThread$Params } from '../fn/thread/get-thread';
import { ThreadEntity } from '../models/thread-entity';

@Injectable({ providedIn: 'root' })
export class ApiThreadService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getThread()` */
  static readonly GetThreadPath = '/api/thread';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getThread()` instead.
   *
   * This method doesn't expect any request body.
   */
  getThread$Response(params: GetThread$Params, context?: HttpContext): Observable<StrictHttpResponse<ThreadEntity>> {
    return getThread(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getThread$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getThread(params: GetThread$Params, context?: HttpContext): Observable<ThreadEntity> {
    return this.getThread$Response(params, context).pipe(
      map((r: StrictHttpResponse<ThreadEntity>): ThreadEntity => r.body)
    );
  }

}
